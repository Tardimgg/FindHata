package com.example.findHataProposalServer.algorithms.kdb;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class KDBTreeTest {

    @Test
    void test() {
        KDBTreeDBDriver driver = new KDBDriverImpl();
        VectorRep rep = new VectorRepImpl();

        KDBTree tree = new KDBTree(3, driver, rep, null);

        tree.insert(new double[]{-0.9054786594294473, -0.9831311137532786, 0.24399769423562523});
        tree.insert(new double[]{-0.30777676682055466, -0.6253808599376482, -0.40037201825051927});
        long id = tree.insert(new double[]{-0.3883812238704123, -0.43521077905549665, -0.847481478606505});
        tree.insert(new double[]{-0.9006050678080697, -0.516294876091506, 0.7099139749786725});
        tree.insert(new double[]{-0.8969758888943438, -0.510985392811786, -0.5561654345092923});
        tree.insert(new double[]{-0.34420027329387537, -0.28513363241545187, -0.9420320041893813});
        long nextId = tree.insert(new double[]{-0.4798733495496479, 0.8226647014975705, -0.5572649342128981});

        assertArrayEquals(rep.findById(id).getVector(),
                new double[]{-0.3883812238704123, -0.43521077905549665, -0.847481478606505});

        assertEquals(tree.find(new double[]{-0.4798733495496479, 0.8226647014975705, -0.5572649342128981},
                new double[]{0.1, 0.1, 0.1}), List.of(nextId));

    }

    @Test
    void getAllTest() {
        KDBTreeDBDriver driver = new KDBDriverImpl();
        VectorRep rep = new VectorRepImpl();

        KDBTree tree = new KDBTree(3, driver, rep, null);

        long id1 = tree.insert(new double[]{-0.9054786594294473, -0.9831311137532786, 0.24399769423562523});
        long id2 = tree.insert(new double[]{-0.30777676682055466, -0.6253808599376482, -0.40037201825051927});
        long id3 = tree.insert(new double[]{-0.3883812238704123, -0.43521077905549665, -0.847481478606505});
        long id4 = tree.insert(new double[]{-0.9006050678080697, -0.516294876091506, 0.7099139749786725});
        long id5 = tree.insert(new double[]{-0.8969758888943438, -0.510985392811786, -0.5561654345092923});
        long id6 = tree.insert(new double[]{-0.34420027329387537, -0.28513363241545187, -0.9420320041893813});
        long id7 = tree.insert(new double[]{-0.4798733495496479, 0.8226647014975705, -0.5572649342128981});

        List<Long> res = tree.find(new double[]{0, 0, 0},
                new double[]{1, 1, 1});
        res.sort(Long::compare);
        assertEquals(List.of(id1, id2, id3, id4, id5, id6, id7), res);
    }


    @Test
    void testWith10() {
        KDBTreeDBDriver driver = new KDBDriverImpl();
        VectorRep rep = new VectorRepImpl();

        KDBTree tree = new KDBTree(30, driver, rep, null);

        tree.insert(new double[]{-0.11897199423252358, 0.15338586956982248, 0.9629384746226555, 0.2307078610886637, 0.9635062089848265, 0.8723187282382201, 0.7268427513374767, -0.6973639067361836, -0.5630929504377735, -0.2761376919579539, -0.8173360167209656, 0.40243077739889466, 0.5682167098787008, -0.6925783006164592, 0.9612991290909432, -0.052904460834254374, 0.6764181340364912, 0.7197573935856723, 0.5174166643478526, 0.7525103891941998, -0.23802383018510076, 0.1181896551600965, -0.375918009223539, -0.5295824897247352, -0.8658655986633503, 0.26699983917245995, -0.7496039857628636, 0.38386424228603655, -0.714603292838061, -0.31224193819922674});
        tree.insert(new double[]{-0.047500858732306694, -0.8056858982944404, -0.06345074761630065, -0.26824244859955537, -0.7390323582349354, -0.9735561955628538, -0.8285112206656149, -0.9574157687700267, 0.48452381500855846, -0.029086675087432567, -0.44374961380801836, -0.5813262418276823, -0.583798776112255, -0.1168010242903963, -0.9122909402297537, 0.7879291740769467, 0.39564692581169414, 0.34028408320589665, 0.4922830230635753, 0.1363392326673618, -0.5476097086267389, 0.15323305581869184, -0.8529462619557833, -0.31793916589085236, 0.6392368291261423, 0.7892572265782574, -0.1015833130174304, 0.7531084113235809, -0.49765006070547013, -0.43870950559574506});
        tree.insert(new double[]{0.02397152539621694, -0.3013891298874254, 0.623806602223455, 0.659252948906131, -0.5075502089637189, -0.9845833903346277, 0.32432903734614604, -0.773904982112043, -0.35577986527071603, 0.0777577516455541, 0.2768392291954864, -0.11757563533008808, 0.44320094609899074, -0.9183033592070375, -0.1064798091329886, -0.9074463600920066, 0.16451251406983314, -0.8449982406781869, -0.17351461884500452, 0.2505857962149649, 0.5000843798626082, 0.230145672506473, -0.9051319839778509, 0.004843131771576692, -0.46193545811270353, 0.5617253810932772, 0.4600380542734315, 0.4549329851340549, 0.15466993452433608, -0.9854899871554978});
        tree.insert(new double[]{0.02397152539621694, -0.3013891298874254, 0.623806602223455, 0.659252948906131, -0.5075502089637189, -0.9845833903346277, 0.32432903734614604, -0.773904982112043, -0.35577986527071603, 0.0777577516455541, 0.2768392291954864, -0.11757563533008808, 0.44320094609899074, -0.9183033592070375, -0.1064798091329886, -0.9074463600920066, 0.16451251406983314, -0.8449982406781869, -0.17351461884500452, 0.2505857962149649, 0.5000843798626082, 0.230145672506473, -0.9051319839778509, 0.004843131771576692, -0.46193545811270353, 0.5617253810932772, 0.4600380542734315, 0.4549329851340549, 0.15466993452433608, -0.9854899871554978});
        tree.insert(new double[]{0.02397152539621694, -0.3013891298874254, 0.623806602223455, 0.659252948906131, -0.5075502089637189, -0.9845833903346277, 0.32432903734614604, -0.773904982112043, -0.35577986527071603, 0.0777577516455541, 0.2768392291954864, -0.11757563533008808, 0.44320094609899074, -0.9183033592070375, -0.1064798091329886, -0.9074463600920066, 0.16451251406983314, -0.8449982406781869, -0.17351461884500452, 0.2505857962149649, 0.5000843798626082, 0.230145672506473, -0.9051319839778509, 0.004843131771576692, -0.46193545811270353, 0.5617253810932772, 0.4600380542734315, 0.4549329851340549, 0.15466993452433608, -0.9854899871554978});
        tree.insert(new double[]{0.02397152539621694, -0.3013891298874254, 0.623806602223455, 0.659252948906131, -0.5075502089637189, -0.9845833903346277, 0.32432903734614604, -0.773904982112043, -0.35577986527071603, 0.0777577516455541, 0.2768392291954864, -0.11757563533008808, 0.44320094609899074, -0.9183033592070375, -0.1064798091329886, -0.9074463600920066, 0.16451251406983314, -0.8449982406781869, -0.17351461884500452, 0.2505857962149649, 0.5000843798626082, 0.230145672506473, -0.9051319839778509, 0.004843131771576692, -0.46193545811270353, 0.5617253810932772, 0.4600380542734315, 0.4549329851340549, 0.15466993452433608, -0.9854899871554978});
        tree.insert(new double[]{-0.9499567158809308, -0.38914658760409826, 0.7930875295082862, -0.5466909786015135, 0.6749738288967013, -0.7851524784298074, -0.705964616933556, 0.56765447908974, 0.6945195904291319, 0.6500296173828868, 0.33750647644386866, 0.6117998498370183, 0.6610685205761306, 0.420842319511473, -0.45268794828113657, -0.08913476687922994, -0.5078432403635085, -0.32261880552809963, -0.3808929046725038, -0.24210767390136967, 0.9481662175301397, -0.37871520577255735, -0.1137677358142477, 0.13408480228261466, 0.9694417581449397, -0.9282183487685258, 0.8881080376435457, -0.03067478557774672, -0.4805530876689781, -0.005156170361059864});
        tree.insert(new double[]{0.41759533873135557, -0.9685974357472251, 0.7233035681014206, 0.19775001565895045, 0.2963072248069143, 0.743090076409181, 0.036791485609342756, -0.7242465377441338, 0.39395200594793, -0.9675442958808036, 0.16222716788240654, 0.893296766899804, -0.44329749140074304, 0.8303691341032446, 0.7384329370627263, 0.4962321459200636, 0.507995055456522, 0.03742494520822248, -0.47409797650159247, -0.2632040274541325, 0.7033423209342549, 0.08050976226258055, -0.983859321830528, -0.4261345497062856, -0.5838578860509855, 0.9624300343816143, -0.9758611874997662, 0.08172987308044277, 0.7168070807510174, 0.9873461998332089});
        tree.insert(new double[]{-0.5643399990124285, -0.6421903254353203, -0.15484504575828817, 0.35322792415772786, 0.9368308226741064, 0.7106179066859939, -0.4874867410803003, 0.5869353420472174, -0.42773887532841504, -0.8709153539023562, -0.621867614133971, -0.44354996411744807, 0.4015717289215739, 0.6437553389016246, 0.7823358086828129, -0.5972316050220736, -0.9421697075242501, -0.9370697088282844, -0.17039809089131008, -0.16740751538771415, -0.5955643896970493, 0.9728060820378446, 0.455134860201692, 0.630846119135134, 0.9270733631665289, -0.5204849562172564, -0.5168842827371507, 0.1108833813068415, 0.2307541966425366, -0.14366879945189548});
        tree.insert(new double[]{-0.6208725986378469, -0.1896141705158192, -0.2731963506558479, -0.5236000504677583, 0.6095948631323889, 0.5051055771706798, 0.47106810729031423, -0.473899845860694, -0.3174996846061158, -0.9234147068199312, -0.7023298802946476, 0.6240934442404964, 0.48006343302740695, -0.38884262454311536, -0.987034659130783, -0.5357394591587892, -0.2584914007474082, -0.20903332955453013, 0.05761359297814228, -0.5392700940877873, -0.4265070832943221, 0.6247733322404712, 0.22043609817723353, 0.6725519000177878, 0.6998326991208779, -0.3059073353023567, 0.2254839422725703, -0.3274123489908922, -0.7118098619081821, 0.535726388269081});
        tree.insert(new double[]{-0.27495803434467025, 0.021141375451437128, -0.5617442965986486, 0.6296249422023283, -0.556839622177512, -0.9773161586983898, 0.9266305524451814, -0.0782016457601784, -0.34456429971550984, 0.2475660161484563, -0.6292556788646857, 0.5175390720622901, -0.7359179355513226, 0.4853032085699449, 0.7497915937136941, 0.8243829625696457, -0.35633355764953123, 0.8472091890505415, -0.5077835562645803, -0.6242796097553207, 0.29567369199717475, -0.6871892552187648, 0.9819826800327782, 0.18677911319161544, -0.3277006785144134, -0.6955821417550829, 0.18516405170882488, 0.14986389151700807, -0.06896092823256228, -0.7756407142599191});
        tree.insert(new double[]{-0.2941690163460944, 0.017091340156840884, -0.5405955230757589, -0.392972778422209, -0.8422081310010046, -0.3511384783728444, 0.16065606514274555, 0.6247596024510784, -0.6222198890489856, 0.4155763223051725, -0.2791111444782539, 0.9917745953582138, 0.27837317643307324, -0.5886406334636023, 0.9782715427231983, 0.004519582225247065, -0.6248928743168394, 0.6301301207523202, 0.4174748825292891, -0.5363770076823624, 0.9083758189304636, 0.32508341527873674, 0.9742656951318491, 0.7351509257535369, -0.3146258121597971, -0.7636065014191884, 0.6751071211420079, 0.3402604497732895, 0.15996153235486021, -0.7891487137353879});
        tree.insert(new double[]{0.5520778638634338, -0.8430648818956108, 0.10726892886633488, 0.8204892637023673, -0.7297924646501881, -0.14467462832145905, -0.23343072927701125, -0.7537837718830096, 0.22354357259979651, 0.30581741222867276, -0.6982196007286943, 0.09934508480659776, 0.9652702463782095, 0.613601882032228, 0.06812134675293846, -0.2173358223278361, 0.16350540398575286, -0.6976571957410294, -0.7795823808209237, 0.7221449856454378, -0.8929609628981727, -0.1748932610698435, -0.053189813547810605, -0.5611139036829091, 0.9519563387153644, -0.024301507106306408, -0.3387101082395898, 0.25711948867470813, -0.336175113662428, 0.9723913722919357});
        tree.insert(new double[]{-0.7320681839694478, 0.9796529803731528, -0.48275892158253786, -0.04927396501280312, -0.3904366274295461, -0.9541608052331332, -0.42488159541656967, -0.1295052741599776, -0.025870302518363752, 0.5655537205858372, -0.088836858436534, 0.33855358094889576, -0.29136997582742974, 0.36727173854893924, 0.7450652764326333, 0.02688129749914947, 0.3653013505720746, 0.27214283453421073, 0.8145985058891476, -0.5354390019181312, -0.4960158542422519, -0.7915827978899459, -0.2859671057646933, -0.16608464320441407, 0.38205274977432, 0.931128003278836, 0.03836203166401653, -0.15538719042788252, 0.9633990613419265, 0.7221849928107411});
        tree.insert(new double[]{-0.8130918389990085, -0.5295965350390417, -0.24563235172080988, 0.7176601865135952, -0.4575387579473993, 0.30636851591001846, 0.6064924723182319, 0.11279769858914612, 0.8094086607869433, -0.626259004709419, -0.5688386485092733, -0.7891724857997617, 0.8928108232377945, 0.2389600565676746, -0.6246712770789629, 0.5202195489754375, 0.4448778285522792, 0.44659786206694174, -0.8561492979470091, 0.575345845513014, 0.8868145408184567, 0.764626544933733, 0.18183420320289212, -0.07438190842568382, -0.3995103983356265, 0.5255257036639871, 0.43368336114914374, -0.09825600235266951, -0.7809105783609114, -0.45105511880386606});
        tree.insert(new double[]{-0.7897860566333794, -0.5734931413134774, 0.5514697250297702, -0.5199372164380494, 0.09275590300862002, -0.3585181126243975, 0.80018210604892, -0.1936140019522723, -0.7991398407855042, 0.6091114417723673, -0.8309764323328508, -0.04452086889593221, -0.2806385045701236, 0.9644172063089893, -0.4016865582145235, 0.3587435295905377, -0.0049268520045846476, -0.6532366075508775, 0.735876991554941, -0.2770961831186838, 0.7270280925134665, -0.3240875927892619, 0.9572097810516274, -0.19173030488841314, -0.5812870891839508, 0.7161646272019502, 0.6450936425534601, -0.8709637395723466, 0.763762326430018, 0.4769243737235904});
        tree.insert(new double[]{-0.34498402567958353, 0.1150763661033607, -0.26477210410938423, 0.5907212392527836, -0.22950091564946073, 0.8955945178171294, -0.9588508118574091, 0.3389501611243779, -0.023659700581539767, 0.4192524648924021, -0.5989412945592187, -0.6797700554853947, 0.6960044379272459, -0.14655341403889577, 0.5547351053426905, -0.4686309607432426, -0.7578880864890547, 0.47155417521997167, 0.5091299992005716, 0.39559451386344047, -0.2153727301183448, -0.6802010052942187, -0.9339546662055469, -0.49135841351736453, 0.8126530681805963, -0.6405801287993855, 0.6006190328349814, -0.7437778059414293, 0.9599161596439296, -0.898269513593069});
        tree.insert(new double[]{0.8930684902967321, 0.6058620890076696, 0.910718890625583, 0.217085969580449, 0.8891840280528214, -0.5081588032145088, -0.7559356618505693, -0.6191010271715505, -0.8839021895142942, -0.9638024156276523, 0.027612732631488557, 0.38915142804678804, 0.3925974939474828, 0.5703859264462268, -0.3621795710917266, -0.05296504742713415, -0.1495405867842119, 0.540229409723026, -0.5165810224184237, -0.034070878906787394, 0.7358951555378042, -0.6402141530995296, -0.5325528437950842, -0.6328998997850996, 0.8219940226544689, -0.7875362451443291, -0.3009718333767788, -0.038747322876725665, -0.08340542046781474, 0.061717342096555106});
        tree.insert(new double[]{0.8561691902863227, 0.655144435607369, 0.3899688135456465, 0.14056710447831278, -0.6097677748487818, 0.49994670909709926, 0.11198438696431179, -0.12863416159204144, 0.36943059388429655, 0.394970882592788, 0.2762650266541198, -0.6905232728153852, 0.5964745420391164, -0.7979990796516474, -0.16064476154290697, 0.8734959890792069, 0.14186685523718068, -0.01839281189517572, -0.3679986588665183, -0.4733796852649401, 0.7657745639958116, 0.6392184716067153, 0.05018514257558038, 0.7458658627024077, -0.5168776435363927, -0.7850834345109148, 0.9368892177974035, -0.04872395439289501, 0.8784612876151874, -0.8149288221244511});
        tree.insert(new double[]{-0.3050450305489185, -0.045304184889972676, -0.13481887779962975, 0.371431129253619, -0.9152908970262645, 0.9611675046289119, -0.7006593847797369, -0.2110201874485933, -0.3734564914958136, 0.18261605640570777, 0.558570735670918, 0.037046197459712715, 0.6664721504096212, 0.40109366055467444, -0.6763254099247604, 0.6093620059493541, 0.7099289706083438, 0.04163502125060203, -0.5105245326306762, 0.962661876191117, 0.5181557457607513, -0.7807867031920601, 0.2899413387024308, 0.9172608442125203, -0.22245007273149286, -0.23343757611838956, 0.2561436784069522, -0.4875807034168729, 0.28315049985588003, -0.3489420368884122});
        tree.insert(new double[]{0.06398299461225476, -0.2514384884197056, 0.5545491070823227, 0.41920582017123986, 0.2761213158534004, -0.25974711251030347, 0.35708381025691716, 0.13731627403813973, 0.1328955795928748, -0.1732969721272637, 0.30885392995415306, -0.25979024017371266, -0.7624433073884427, 0.9359457919797658, 0.18852655002374918, 0.3902462748875619, -0.5465717755860742, 0.917718179849982, 0.008070008856452704, -0.2927901124944179, -0.8428969684273064, 0.797230455802505, -0.7178930610800807, -0.10704337552316989, 0.5178803780516967, -0.9145646370355831, -0.6533946920457543, -0.18327153816226605, 0.498462125580849, -0.42777390619244837});
        tree.insert(new double[]{-0.08519814762199052, 0.9640345548759672, 0.07875928095572848, 0.01917372497143588, 0.8418912866268775, 0.7612016271639781, 0.07426532062254454, 0.7351069815530056, -0.17180668161102686, 0.72264371545787, 0.07067780551409775, -0.08829628541730306, -0.1194852824640309, -0.37836080159832863, 0.23777680292807557, -0.9050886474291235, -0.792103207566176, 0.16632498526033124, -0.8200419141382622, -0.17725900696502217, 0.06732712240124883, 0.030684421212830548, -0.1896362402484264, -0.241834052115937, -0.08460593731752963, -0.22378511585193261, -0.6760342729478066, -0.351462037762017, 0.6138544699766804, -0.2950657572688853});
        tree.insert(new double[]{-0.8646790238627735, -0.16393298590710126, -0.38524173671855144, 0.36841061815135867, -0.8152150565519296, -0.449804239835478, 0.28140828418945185, -0.14209778405015516, 0.3094914754320315, 0.4804190071121843, 0.622938664885405, 0.6964204022544711, -0.004247443206798929, -0.19074397604195847, -0.950958327902713, -0.04594263641156071, 0.4998255613290321, -0.6655199025763243, -0.7927653864155493, 0.8750331420861448, -0.09319170114978581, 0.44196594017702595, 0.2703842426662697, 0.9383094236503824, 0.5751526121043831, -0.531731045687285, -0.32172029676173053, 0.4931734616670882, 0.19636999630907548, 0.34952014837252476});
        tree.insert(new double[]{0.012547376128442478, -0.2190096079849091, -0.39580330481624526, 0.7183529528460093, -0.1239653198405779, -0.9448162345821371, -0.14713281577242832, -0.6248145645953804, 0.6550137312744608, 0.5876850397633151, 0.9657831050996069, -0.5468482225923186, -0.7767041869775966, -0.07086987493962837, 0.11564094843999295, -0.20847520959449461, 0.767486723141386, -0.8710085722030345, 0.15684390985085583, 0.8859537808648816, -0.021821152940550093, 0.20680764552600372, 0.851818930590772, -0.6608252801065231, 0.8620512429441158, -0.6131912379774052, -0.09637911275847366, 0.7352091558530285, -0.6165788696397128, 0.7365724732591428});
        tree.insert(new double[]{-0.16335408068591684, 0.5876923938036567, -0.8756942734568856, 0.07199440925456257, -0.31518258498374063, -0.8434243260249414, -0.31304644326216513, -0.13386026060858347, -0.8827996711474595, -0.4798715803917408, -0.18833452110284088, -0.20335047373189363, -0.6784549724654247, 0.15904594754606372, 0.09580868046139202, 0.1013801671738761, 0.42908912305597346, 0.7727512178238201, 0.502352113545836, 0.2690599869085646, -0.8230654657579823, -0.6468193433651133, -0.22224368283867202, 0.2725096545467762, 0.8756430358836857, -0.7974489083116909, -0.6133463503964958, -0.740245602020073, 0.19935674700944683, -0.3872989003380938});
        tree.insert(new double[]{-0.4062907713219208, -0.47293811361037386, 0.564354710015752, -0.743318356871006, 0.8314981089051887, 0.6608516529027821, -0.2749858624034913, 0.7550833989895063, 0.6541596956953788, -0.7603693629177026, 0.6711876247109245, 0.14665006447742024, 0.9323757408954263, 0.16775733576091745, -0.41622552251972667, -0.8158152571253314, -0.0143820105491419, -0.04775950644530691, 0.929454369777359, 0.7260085664604119, 0.4103163397610188, 0.1424072959564946, -0.9289807740672764, -0.8634191253281702, -0.6667266461009884, 0.4593925800395975, 0.19699047163654315, -0.40305444092060916, 0.08548835415765232, 0.33529995465267404});
        tree.insert(new double[]{-0.5258188724706077, 0.43475957662484777, 0.6860393501888542, -0.7001820737329778, -0.9162120422966065, 0.9853162407377416, -0.8172928132469448, 0.5066089759085382, -0.8815557799591052, 0.3599385678123501, 0.9943341454938694, 0.13710083426493447, -0.5268899232687152, 0.7235615756887885, -0.7822809517575047, 0.7966728013638924, 0.01473371157899428, 0.9666380339010778, -0.04599317360415256, 0.356591123103966, -0.4018237862162608, 0.08497426868818225, 0.5939536715905152, 0.6854578656455708, -0.31853540511492384, 0.5632981513659412, -0.19126602747279398, 0.849994791476502, -0.9631742290656706, 0.8057904019524647});
        tree.insert(new double[]{-0.8618880950486729, 0.8071182974054976, 0.30869336145835735, -0.1446946436532901, -0.6963796505157198, 0.6762540397933956, 0.005024108882649259, -0.7742166050880364, 0.7717703996420875, 0.019740542135484374, -0.40884918187540653, -0.9719668210415906, -0.6248821147484354, -0.5923784814947641, 0.4864729331853317, 0.6789095979192505, 0.7596883398359666, 0.3241887516808608, -0.27931367878577285, -0.29915844507940026, 0.9303704003883795, 0.2819854396542105, -0.20076518513562958, 0.6833392568932082, 0.8494460503450769, 0.8974702037687725, -0.6915646795677917, -0.4837595685068521, 0.35684128544739324, -0.5890113681420599});
        tree.insert(new double[]{-0.4594688913501799, 0.8707341546811638, 0.16572650102700437, -0.21989259835188002, -0.01741696566484774, 0.08523010335073455, 0.3750098474495498, 0.02974115317189563, -0.30421111321075545, 0.4243565723173377, -0.32102426151341135, 0.2061648626289183, -0.03707420613767631, 0.4865807560550728, 0.17300940721266933, 0.09880041991381794, 0.12909380953420424, -0.9787849191091309, -0.5851947960063524, 0.6064683912890114, -0.2681101599889304, -0.33097035653842677, 0.8544349093915153, 0.38486932407685326, -0.5835417465311115, -0.5081819123408375, -0.730718840950118, 0.36973147638394166, -0.05509360610620262, 0.7292258136029477});
        tree.insert(new double[]{0.989881961732396, -0.610750508037428, -0.3266728613844836, 0.7961568863530917, -0.4510944085201265, -0.3864864118189013, -0.2707350923353322, -0.8838848734716378, 0.7798359533374548, -0.3465585534974047, -0.7328904327735528, -0.9240719004889228, -0.795714878103275, 0.4478911094757103, 0.9945249379734971, -0.20134211196353946, 0.0317144518032475, 0.4488416140234768, -0.9712210572500697, 0.4605956494142347, 0.21786505625076513, 0.013471575587198137, 0.5851186125722376, -0.637425802073599, -0.8684606735485367, 0.06767452899308357, -0.325797559226906, 0.7472939299005519, 0.8869523684843716, 0.8719593837835231});
        tree.insert(new double[]{0.1689416549849454, 0.7180608088442291, 0.8971442430048404, 0.8798482364772102, 0.4616151568330096, -0.46285580525661185, -0.9939462209789907, 0.9374779403737488, 0.795230146710818, 0.12929454099991955, 0.33491534425458513, 0.8986108269858328, 0.43064456274907337, -0.1816373951291248, -0.1920233869114305, -0.6758519235185738, 0.2011611641415727, 0.4574546667936106, 0.5230639063063154, -0.49123255938528776, 0.6785363531593454, 0.9003276480538487, 0.9309662502613305, -0.6708774691743928, 0.5388091064116249, -0.6175431684566564, 0.7585763298213903, 0.6608544437439032, -0.6155756632322433, 0.9151534907139878});
        tree.insert(new double[]{0.2738614813296263, -0.7656032238247814, 0.9398347661469486, 0.05369449145502747, 0.18151823459056926, 0.013039409030737081, -0.30087508316713496, 0.6583012662331138, -0.45387869673776593, -0.4181484809645031, 0.2207473963241553, 0.23418868295010875, -0.6018610558076305, -0.08193131037165435, 0.697057495197722, 0.04007577793860362, -0.670780301656114, 0.9211135954666752, -0.8282618454447928, 0.49966439881850877, 0.7428508358555694, 0.19112055016964957, -0.07388948990020383, -0.0838675340204258, 0.6441898022219221, -0.14048649578931616, -0.454480286754682, -0.9687648587852034, -0.8664867150166553, 0.23980597535544335});
        tree.insert(new double[]{-0.7043005838547789, -0.9292812983336642, -0.4635955973129333, 0.3197416255604071, -0.6395663843601842, 0.8319569139157814, -0.8778983734791801, -0.21224261420241497, 0.009465675446312938, -0.6291241430492411, 0.9383512966625782, 0.3234837208591457, 0.8772867113894434, 0.06862723718250696, 0.25571285216082296, 0.6777786883883361, -0.406731028801824, -0.044976058960203735, 0.7566365772006305, -0.4329789695814734, 0.540216829747129, 0.18667830866543045, -0.07741241674058008, 0.9518457317881535, 0.7167325240966198, 0.16766385773915693, 0.1330242168561897, -0.4936504665402266, 0.0753388573706042, -0.16856989176306048});
        tree.insert(new double[]{0.3019433505556657, -0.6887890617798504, -0.8693259088389633, 0.535498263501218, -0.81105209874337, -0.1982756222876607, -0.8341435224593332, -0.34211429511994873, 0.1596817155218906, -0.36448483328749415, 0.35420595396640264, 0.27750649433642893, -0.3795777062242853, 0.47229800456532933, 0.43430938783165995, 0.6678301036589889, -0.46740674077851097, 0.220111877884001, 0.25220933701147996, 0.7990323781758224, -0.703219645902782, -0.38922512950951327, 0.002696526613583883, 0.5612286510973505, -0.47256880257803524, -0.768654218019416, -0.2772343578534504, 0.7149305938073212, -0.44632247161423155, -0.11013568903666116});
        tree.insert(new double[]{-0.04202394354616645, 0.7126592179322258, -0.7329534726043669, 0.12862575018413658, 0.5127031939309916, -0.25943238438838634, 0.19496715462607206, -0.34379554147546454, 0.4383471349447312, 0.08652019727492766, -0.14962990880350002, -0.9704625128846789, -0.2900494906197817, -0.5142132128215267, -0.1491864521485029, -0.5136363171689602, 0.060413803145567435, 0.5154227091198238, 0.9113936390586277, -0.7283155613654828, -0.5858270719269023, 0.4918845642033729, -0.3413863008727933, 0.7698449123344393, 0.1748951462245658, 0.24661507896415347, 0.9004818005628554, -0.9932392566287422, -0.8121909447595774, 0.8813686368192535});
        tree.insert(new double[]{0.3175129992627588, 0.8537810238322205, 0.6625479976482611, -0.7039274488789979, 0.3828426163366303, -0.725178490923198, -0.006971085355337969, -0.3634861367607991, -0.21082683779679035, 0.5647349967416315, -0.45978333010718386, 0.972390026648696, -0.9699498978636156, -0.2807779174066065, -0.9191838023367178, -0.2950493317991767, 0.95479918350694, 0.620072475871549, 0.6922407036913942, 0.3865652930255221, -0.8723848447096889, 0.2035522003335326, 0.9966614987088451, -0.7027515371184803, -0.7701766809733737, -0.22682220689464017, -0.76082427823376, 0.8346949959585657, -0.23841452671104157, -0.42873418741519864});
        tree.insert(new double[]{-0.4014485172454454, -0.9441031836399638, 0.7042890338763819, 0.5443359137738393, 0.9685147561406651, -0.4225592532662241, -0.4252873254530396, -0.13167713142069482, 0.45734045304140025, 0.28086830519539263, 0.06665927015183448, 0.7417049080853177, 0.7578440811394338, -0.729697594027864, 0.6820782512634229, -0.393347340373722, 0.6242024726360036, 0.9136095942308677, -0.5086007392302854, 0.9586863984398446, 0.27848690789644115, 0.4535480280750559, -0.19212355487963584, -0.64005428433461, -0.29637251604242776, -0.352943653822791, 0.29797768838024763, 0.5274802701979757, -0.4306360866333365, 0.7200133398991599});
        tree.insert(new double[]{-0.7739795806987968, -0.7561533511761327, 0.4439885202152565, -0.4643173631323898, 0.7751063358137456, 0.4763136472620555, 0.8758079628442235, -0.18250662405021822, 0.4808739207632793, -0.27146501382549815, -0.2116551462432923, -0.2811256569656626, -0.5156441125505469, 0.6224527934365693, 0.14758674980757402, -0.9500542498550981, -0.12812825617158552, 0.843542267829023, 0.3485397554884797, 0.13151698019685432, -0.9023941700633982, -0.047447463403900825, 0.4288628208557439, 0.6599031638641477, -0.18063963041614506, 0.05826078291248504, 0.1790369135601506, -0.2318799399310001, -0.19170469894163067, 0.26067154727892117});
        tree.insert(new double[]{-0.19596037855095805, 0.6752511930732588, -0.5176020359289986, 0.6358587498355681, -0.3190888369021889, 0.99090459999984, -0.36457558073330687, 0.8321622699145972, 0.5559226299426205, 0.4954032131485713, 0.9375856224570098, 0.1533755428255088, -0.13395064070452323, 0.49321670758179637, -0.22654505961438143, 0.959632426928515, 0.6243806518242621, 0.5262055811067448, 0.45136469636699816, 0.531760642812716, -0.06494732165319439, -0.5681311497327517, 0.10415653431469596, -0.9061112770038009, -0.9949977000870565, 0.4048816423411328, -0.8890820355545765, -0.48798347367633377, -0.5233901460782844, 0.7308408889714297});
        tree.insert(new double[]{-0.3155305875707015, -0.6802085641353406, 0.926504424782586, -0.5100110033409069, 0.372417530549338, -0.9060632770640984, -0.6603412644964635, -0.9207869350248414, -0.9454808116004574, -0.21179216809721857, 0.10181151462617355, -0.6918116948198565, -0.8422597907635352, 0.6484929718142829, -0.07550070100219886, 0.5852003503148671, 0.632111140788616, -0.40839186865612276, 0.4681161477375593, -0.686513094310087, 0.8495953456607737, -0.9027579803370169, -0.9810791216117758, 0.3654703359220277, 0.2980125555581328, 0.7056654687420378, -0.6822951603719223, -0.8260882624955703, -0.5001713821273803, 0.3703558410155017});
        tree.insert(new double[]{-0.7520990577837223, -0.009585769795509513, -0.4393550944200211, 0.748934339977297, -0.17815117683628579, 0.2441727193380181, -0.1852435850759988, -0.8990736352033424, 0.4318218824122013, -0.4574152534924891, -0.20947556996525063, 0.20925751541330517, 0.04343911413720947, 0.27746035927615154, -0.6493967345393052, 0.9746052915862458, -0.530550540008687, -0.5821971078385708, 0.04692251258221547, -0.14854661905160893, -0.7949911738413706, -0.07878900540913159, 0.503753260172707, -0.5097386662051231, 0.9642730407672679, 0.06278746317260508, 0.017909983425779208, -0.30840259244641244, -0.6100595432359677, -0.8917292922195867});
        tree.insert(new double[]{-0.9595157167898296, -0.6143225541888018, -0.31694713407232555, -0.201402636968816, 0.9747135851921638, -0.8832315746697013, -0.2473194913406107, 0.44760667095947415, 0.05125705197554753, -0.12917264851411958, -0.6263114700898054, -0.2796171923567268, 0.8888512246768459, 0.4455067849907297, -0.4367267929810845, -0.41715475128380497, -0.22770313125736696, 0.6196955463852472, -0.4950497590292666, -0.692804935263214, 0.7300480781880629, -0.13916721728407588, -0.7384467591610704, -0.8203622665702253, -0.13088846365676532, 0.3198591597730951, -0.7362088342004971, 0.007531197990377603, -0.39533505109330846, 0.07984842936665171});
    }


    @Test
    void stressTest() {

        KDBTreeDBDriver driver = new KDBDriverImpl();
        VectorRep rep = new VectorRepImpl();

        KDBTree tree = new KDBTree(3, 10, driver, rep, null);

        tree.insert(new double[]{-0.3023662714570752, -0.7519926441608631, 0.7239538810490302});
        tree.insert(new double[]{-0.41440411079413764, -0.6029018914446176, 0.81478359004189});
        tree.insert(new double[]{-0.5491505556854124, -0.927762681745238, 0.6790129185852263});
        tree.insert(new double[]{-0.7511428536175, -0.9818455406084525, -0.7968699380476725});
        tree.insert(new double[]{-0.8992305817925046, -0.22317977866049166, -0.0022123939747051846});
        tree.insert(new double[]{0.8566615351391156, -0.8826425760303322, 0.012040714077259151});
        tree.insert(new double[]{-0.15042514448688293, -0.8853072920821434, 0.4901887369065685});
        tree.insert(new double[]{0.5596173122158747, 0.7090686671343245, -0.6651614400825041});
        tree.insert(new double[]{-0.2568746784119502, -0.2788435672544691, -0.7394699931393165});
        tree.insert(new double[]{-0.6746115562435884, 0.7604973165833064, 0.1723641802784477});
        tree.insert(new double[]{0.04746658309384011, 0.3792654249779299, 0.9661217526280568});
        tree.insert(new double[]{0.7064233951325896, -0.167783329069233, -0.06691510057010541});
        tree.insert(new double[]{-0.8866615203239825, -0.4881675909827441, 0.6340479368599194});
        tree.insert(new double[]{0.6189605142660741, 0.5641833348911229, -0.5443043529526277});
        tree.insert(new double[]{-0.046854088853399034, 0.4111638336563237, -0.1936156094691046});
        tree.insert(new double[]{-0.1448926521531304, 0.3998333351982042, -0.4658907000450103});
        tree.insert(new double[]{-0.2768402197449451, 0.6724858837069556, 0.7260538178542981});
        tree.insert(new double[]{-0.8429978316993594, -0.3803004665151921, -0.4741472357202139});
        tree.insert(new double[]{-0.8267370798493803, 0.7822257704978799, -0.6880812586873293});
        tree.insert(new double[]{-0.539725441334074, 0.7375367565600517, 0.7457953656606697});
        tree.insert(new double[]{0.9226484119502982, -0.8528608935192346, 0.5643452725690454});
        tree.insert(new double[]{-0.8786761930910587, -0.31917371289534757, 0.14531920189697778});
        long id = tree.insert(new double[]{0.8677041527890645, -0.7933194452994943, -0.6028119077928367});
        tree.insert(new double[]{-0.7629201417836882, -0.6679579492991725, 0.047856343642017185});
        tree.insert(new double[]{-0.3737105112393433, -0.47218955048829714, -0.4473022763505088});
        tree.insert(new double[]{-0.3788380741879518, -0.01963698797698532, 0.7803190825636592});
        tree.insert(new double[]{-0.3112363328887584, -0.4879212588292916, 0.3751137442753272});
        tree.insert(new double[]{0.8924801370929083, 0.01047969374285751, 0.7134432426659809});
        tree.insert(new double[]{0.6623293365461973, -0.07419536675758209, -0.28177991396561364});
        tree.insert(new double[]{0.974244707464148, 0.35020345863601476, 0.7275956148473568});
        tree.insert(new double[]{-0.6560688742712679, -0.7921579095945677, 0.1755925784271033});
        tree.insert(new double[]{-0.0642279578692111, 0.037397832320410496, 0.5041843655494651});
        tree.insert(new double[]{0.5555117834074674, 0.46886786490697663, -0.7728756631799101});
        tree.insert(new double[]{-0.6229384961776256, -0.7762004439531798, -0.8012629503305893});
        tree.insert(new double[]{0.9733020835192154, -0.04078638433310999, -0.5892365939908084});
        tree.insert(new double[]{0.11586184589105786, -0.6650326543694391, -0.9052714548762422});
        tree.insert(new double[]{0.8796072973496916, 0.12148266137604913, -0.6972406455558848});
        tree.insert(new double[]{0.4336697854340399, -0.37320012698968785, 0.3486943322556515});
        tree.insert(new double[]{0.18047671592749936, 0.1974607293648103, 0.32727722699356043});
        tree.insert(new double[]{-0.5408617071187578, 0.30185523695138095, -0.1730427985819718});
        tree.insert(new double[]{0.6737065015038664, 0.7401052184511228, 0.9822323597001412});
        tree.insert(new double[]{-0.23868863357613201, -0.7957279745786701, 0.013629478118845517});
        tree.insert(new double[]{0.8064652096323357, 0.37696907372204147, 0.15010214485411044});
        tree.insert(new double[]{0.3991462215129711, 0.6119190749972263, 0.25339918302656805});
        tree.insert(new double[]{0.07346603530604923, 0.7946285181203396, -0.0765802334021839});
        tree.insert(new double[]{-0.4054021692973362, 0.9505675006074183, 0.5403338347033053});
        tree.insert(new double[]{0.9136739495876736, -0.02317555178548103, 0.3156462658161745});
        tree.insert(new double[]{-0.03724751282971761, 0.408218205793617, -0.22244062838331136});
        tree.insert(new double[]{-0.1191964011952753, 0.2437264823434755, -0.2558699607419703});
        tree.insert(new double[]{0.6977685505262528, -0.060696009607448254, 0.975802193572685});
        tree.insert(new double[]{-0.355137006453768, 0.2648481160355478, 0.8880293095405778});
        tree.insert(new double[]{0.132139781465332, -0.7552253594789262, 0.40318682728090627});
        tree.insert(new double[]{-0.13058691862666882, 0.09336162286374416, -0.7119477116604185});
        tree.insert(new double[]{0.006685069888286543, -0.46237834328016914, -0.6032266882429733});
        tree.insert(new double[]{-0.642716911326163, -0.4739125355248597, -0.5233253295350471});
        tree.insert(new double[]{0.9788872810794875, 0.6692374594997195, 0.9815898158706098});
        tree.insert(new double[]{-0.42092212506057547, 0.5745846456501689, 0.1459404537010125});
        tree.insert(new double[]{-0.36151177946702107, -0.4129896705566527, -0.275095047839196});
        tree.insert(new double[]{0.2206604287606222, 0.8775303533207719, -0.9210172302137669});
        tree.insert(new double[]{-0.021867174307588666, -0.9005747121814516, -0.3772649440062352});
        tree.insert(new double[]{0.15254276719894455, -0.589253289770165, 0.019885147273832615});
        tree.insert(new double[]{0.96632425394962, 0.7239987777683821, 0.22729980604833});
        tree.insert(new double[]{0.5466673291759525, 0.08526934900425265, -0.6251416771833544});
        tree.insert(new double[]{-0.13596534601432175, 0.04270698483583946, 0.08831299974007423});
        tree.insert(new double[]{0.17395986617959402, 0.9030208631779169, 0.947804965315028});
        tree.insert(new double[]{-0.4150417146745866, 0.9637719066458597, -0.17132295436770262});
        tree.insert(new double[]{0.3783900929329802, -0.2832083339201046, -0.7506735639611235});
        tree.insert(new double[]{0.008670125337112422, 0.9277891395979201, -0.280126513228266});
        tree.insert(new double[]{0.09551535078367879, -0.8282523532591162, -0.31039077726741526});
        tree.insert(new double[]{0.2753943687022993, 0.4017468220937501, -0.7322055528573554});
        tree.insert(new double[]{-0.20552854447394653, 0.38849755778118134, 0.8380172213575066});
        tree.insert(new double[]{0.23949305747489347, -0.3871149815014481, 0.6449192461552278});
        tree.insert(new double[]{-0.7967244530074586, 0.8707549007896975, -0.012357121075321942});
        tree.insert(new double[]{-0.36017228314554495, -0.7545434860342961, -0.9522774812628201});
        tree.insert(new double[]{-0.5805397775892918, 0.4370589662993871, 0.24726214860777396});
        tree.insert(new double[]{0.7531978860358579, 0.6311863063048537, 0.4948412706079688});
        tree.insert(new double[]{-0.7957429444326909, 0.34347641663100537, 8.715870796494052e-05});
        long id2 = tree.insert(new double[]{0.4844546387760613, -0.4544861432606213, -0.21872827153902796});
        tree.insert(new double[]{-0.29440194900974115, 0.46946821205575584, -0.6370571131802789});
        tree.insert(new double[]{0.2190481623510998, -0.7587716952376578, -0.10460399944099974});
        tree.insert(new double[]{-0.7373458872324874, -0.5053940454190611, 0.9050473262857501});
        tree.insert(new double[]{0.5193440082353404, 0.30892012850023365, 0.6579829309891416});
        tree.insert(new double[]{0.6614002595678043, 0.3311272027895571, 0.6926014965234244});
        tree.insert(new double[]{-0.7282374992660476, 0.41971690829120134, -0.30141688655536303});
        tree.insert(new double[]{-0.7879540748091101, -0.2692008751500714, -0.06591599319968111});
        tree.insert(new double[]{0.27203374597781194, -0.5391614729861129, -0.4707208762431372});
        tree.insert(new double[]{0.36556949718061826, -0.7080196894155093, 0.7231153402683352});
        tree.insert(new double[]{-0.696873724625285, -0.7449818325322057, -0.3232847705946289});
        tree.insert(new double[]{0.8331288132376382, -0.6508580396806647, 0.8075926974686229});
        tree.insert(new double[]{-0.0016427505227651906, 0.8430678915013199, 0.7312195668166159});
        tree.insert(new double[]{-0.7964421041627445, 0.23996596542162463, -0.28920630674631975});
        tree.insert(new double[]{0.11181707741806135, 0.2721783710632213, -0.16522494922153674});
        long id3 = tree.insert(new double[]{0.9239649728973973, -0.7582579266766836, -0.1252523157454941});
        tree.insert(new double[]{-0.37592785399952033, -0.019253749831463995, 0.656259878152939});
        tree.insert(new double[]{-0.46870764611998683, 0.36582904229446545, 0.9718211792350018});
        tree.insert(new double[]{-0.04644328420522026, 0.10660706520251151, -0.18926134013362717});
        tree.insert(new double[]{0.3739779516367907, -0.26437056823133354, 0.8120087264997582});
        tree.insert(new double[]{0.5920225851493826, 0.5763221112038233, -0.2551325741800696});
        tree.insert(new double[]{-0.1459393270485374, 0.20411990209617947, -0.6313831334215221});
        tree.insert(new double[]{-0.38278480589352615, 0.04845717608104194, 0.27109101435036886});


        assertEquals(tree.find(new double[]{0.8677041527890645, -0.7933194452994943, -0.6028119077928367},
                new double[]{0.1, 0.1, 0.1}), List.of(id));

        List<Long> res = tree.find(new double[]{0.8677041527890645, -0.7933194452994943, -0.6028119077928367},
                new double[]{0.5, 0.5, 0.5});
        res.sort(Long::compare);
        assertEquals(List.of(id, id2, id3), res);

        tree.remove(id);
        tree.remove(id2);
        tree.remove(id3);


    }

    @Test
    void testFindIndex() {
        KDBTree tree = new KDBTree(3, 10, null, null, null);

        double[] data = new double[]{1.0, 1.0, 1.0};
        assertEquals(0, tree.findLeftBorder(data, data.length, 1.0));
        assertEquals(2, tree.findRightBorder(data, data.length, 1.0));
        assertEquals(0, tree.findLeftBorder(data, data.length, 0.8));
        assertEquals(0, tree.findRightBorder(data, data.length, 0.8));

        data = new double[]{1.0, 1.2, 1.3};
        assertEquals(2, tree.findLeftBorder(data, data.length, 1.3));
        assertEquals(2, tree.findRightBorder(data, data.length, 1.3));
        assertEquals(3, tree.findLeftBorder(data, data.length, 1.31));
        assertEquals(3, tree.findRightBorder(data, data.length, 1.31));

        data = new double[]{0, 1.0, 1.0, 1.0, 1.2};
        assertEquals(1, tree.findLeftBorder(data, data.length, 1.0));
        assertEquals(3, tree.findRightBorder(data, data.length, 1.0));
        assertEquals(1, tree.findLeftBorder(data, data.length, 0.9));
        assertEquals(1, tree.findRightBorder(data, data.length, 0.9));
        assertEquals(4, tree.findLeftBorder(data, data.length, 1.1));
        assertEquals(4, tree.findRightBorder(data, data.length, 1.1));

        data = new double[]{-1.1, 0.5, 1.0, 1.0, 1.2};
        assertEquals(1, tree.findLeftBorder(data, data.length, 0.3));
        assertEquals(1, tree.findRightBorder(data, data.length, 0.3));

        data = new double[]{-1.1};
        assertEquals(0, tree.findLeftBorder(data, data.length, -1.1));
        assertEquals(0, tree.findRightBorder(data, data.length, -1.1));
    }

}